
@inproceedings{tang_towards_2023,
	address = {New York, NY, USA},
	series = {{ASE} '22},
	title = {Towards {Understanding} {Third}-party {Library} {Dependency} in {C}/{C}++ {Ecosystem}},
	isbn = {978-1-4503-9475-8},
	url = {https://doi.org/10.1145/3551349.3560432},
	doi = {10.1145/3551349.3560432},
	abstract = {Third-party libraries (TPLs) are frequently reused in software to reduce development cost and the time to market. However, external library dependencies may introduce vulnerabilities into host applications. The issue of library dependency has received considerable critical attention. Many package managers, such as Maven, Pip, and NPM, are proposed to manage TPLs. Moreover, a significant amount of effort has been put into studying dependencies in language ecosystems like Java, Python, and JavaScript except C/C++. Due to the lack of a unified package manager for C/C++, existing research has only few understanding of TPL dependencies in the C/C++ ecosystem, especially at large scale. Towards understanding TPL dependencies in the C/C++ ecosystem, we collect existing TPL databases, package management tools, and dependency detection tools, summarize the dependency patterns of C/C++ projects, and construct a comprehensive and precise C/C++ dependency detector. Using our detector, we extract dependencies from a large-scale database containing 24K C/C++ repositories from GitHub. Based on the extracted dependencies, we provide the results and findings of an empirical study, which aims at understanding the characteristics of the TPL dependencies. We further discuss the implications to manage dependency for C/C++ and the future research directions for software engineering researchers and developers in fields of library development, software composition analysis, and C/C++ package manager.},
	booktitle = {Proceedings of the 37th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Tang, Wei and Xu, Zhengzi and Liu, Chengwei and Wu, Jiahui and Yang, Shouguo and Li, Yi and Luo, Ping and Liu, Yang},
	year = {2023},
	note = {event-place: Rochester, MI, USA},
	keywords = {Mining Software Repositories, Package Manager, Third-Party Library},
}

@inproceedings{s_wu_vulnerability_2020,
	title = {Vulnerability {Time} {Series} {Prediction} {Based} on {Multivariable} {LSTM}},
	isbn = {2163-5056},
	doi = {10.1109/ASID50160.2020.9271730},
	booktitle = {2020 {IEEE} 14th {International} {Conference} on {Anti}-counterfeiting, {Security}, and {Identification} ({ASID})},
	author = {{S. Wu} and {C. Wang} and {J. Zeng} and {C. Wu}},
	month = nov,
	year = {2020},
	note = {Journal Abbreviation: 2020 IEEE 14th International Conference on Anti-counterfeiting, Security, and Identification (ASID)},
	pages = {185--190},
}

@inproceedings{abunadi_towards_2015,
	address = {New York, NY, USA},
	series = {{ICEMIS} '15},
	title = {Towards {Cross} {Project} {Vulnerability} {Prediction} in {Open} {Source} {Web} {Applications}},
	isbn = {978-1-4503-3418-1},
	url = {https://doi.org/10.1145/2832987.2833051},
	doi = {10.1145/2832987.2833051},
	abstract = {Building secure software is challenging, time-consuming, and expensive. Software vulnerability prediction models that identify vulnerable software components are usually used to focus security efforts, with the aim of helping to reduce the time and effort needed to secure software. Existing vulnerability prediction models use process or product metrics and machine learning techniques to identify vulnerable software components. Cross project vulnerability prediction plays a significant role in appraising the most likely vulnerable software components, specifically for new or inactive projects. Little effort has been spent to deliver clear guidelines on how to choose the training data for project vulnerability prediction. In this work, we present an empirical study aiming at clarifying how useful cross project prediction techniques in predicting software vulnerabilities. Our study employs the classification provided by different machine learning techniques to improve the detection of vulnerable components. We have elaborately compared the prediction performance of five well-known classifiers. The study is conducted on a publicly available dataset of several PHP open source web applications and in the context of cross project vulnerability prediction, which represents one of the main challenges in the vulnerability prediction field.},
	booktitle = {Proceedings of the {The} {International} {Conference} on {Engineering} \& {MIS} 2015},
	publisher = {Association for Computing Machinery},
	author = {Abunadi, Ibrahim and Alenezi, Mamdouh},
	year = {2015},
	note = {event-place: Istanbul, Turkey},
	keywords = {Cross-project vulnerability prediction, Data mining, Software quality, Software security},
}

@misc{noauthor_open_nodate,
	title = {Open {Source} {Software} {Security} {\textbar} {CISA}},
	url = {https://www.cisa.gov/opensource},
	urldate = {2024-07-11},
}

@inproceedings{subramanian_empirical_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {An empirical study of the first contributions of developers to open source projects on {GitHub}},
	isbn = {978-1-4503-7122-3},
	url = {https://doi.org/10.1145/3377812.3382165},
	doi = {10.1145/3377812.3382165},
	abstract = {The popularity of Open Source Software (OSS) is at an all-time high and for it to remain so it is vital for new developers to continually join and contribute to the OSS community. In this paper, to better understand the first time contributor, we study the characteristics of the first pull request (PR) made to an OSS project by developers. We mine GitHub for the first OSS PR of 3501 developers to study certain characteristics of PRs like language and size. We find that over 1/3rd of the PRs were in Java while C++ was very unpopular. A large fraction of PRs didn't even involve writing code, and were a mixture of trivial and non-trivial changes.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings}},
	publisher = {Association for Computing Machinery},
	author = {Subramanian, Vikram N.},
	year = {2020},
	note = {event-place: Seoul, South Korea},
	pages = {116--118},
}

@inproceedings{i_ceh_analysis_2021,
	title = {Analysis of the {Open} {Source} {Software} {Development} {Project} {Properties} and {Practices}},
	doi = {10.1109/TEMSCON-EUR52034.2021.9488616},
	booktitle = {2021 {IEEE} {Technology} \& {Engineering} {Management} {Conference} - {Europe} ({TEMSCON}-{EUR})},
	author = {{I. Čeh} and {G. Delač} and {M. Štorga}},
	month = may,
	year = {2021},
	note = {Journal Abbreviation: 2021 IEEE Technology \& Engineering Management Conference - Europe (TEMSCON-EUR)},
	pages = {1--6},
}

@misc{noauthor_pmdarima_nodate,
	title = {pmdarima: {Python}'s forecast::auto.arima equivalent},
	copyright = {MIT},
	shorttitle = {pmdarima},
	url = {http://alkaline-ml.com/pmdarima},
	urldate = {2024-07-10},
	keywords = {Scientific/Engineering, Software Development, arima,, forecasting,, pmdarima,, pyramid,, pyramid-arima,, scikit-learn,, statsmodels, timeseries,},
}

@misc{noauthor_vulnerability_nodate,
	title = {Vulnerability {APIs}},
	url = {https://nvd.nist.gov/developers/vulnerabilities},
	urldate = {2024-07-09},
}

@misc{noauthor_github_nodate,
	title = {{GitHub} {REST} {API} documentation},
	url = {https://docs.github.com/_next/data/mjcX-Kg16OuchVhOk_10Y/en/free-pro-team@latest/rest.json?apiVersion=2022-11-28&versionId=free-pro-team%40latest&productId=rest},
	abstract = {Create integrations, retrieve data, and automate your workflows with the GitHub REST API.},
	language = {en},
	urldate = {2024-07-09},
	journal = {GitHub Docs},
}

@inproceedings{f_abdulhafidh_dael_performance_2022,
	title = {Performance {Evaluation} of {Time} {Series} {Forecasting} {Methods} in {The} {Stock} {Market}: {A} {Comparative} {Study}},
	doi = {10.1109/DASA54658.2022.9765177},
	booktitle = {2022 {International} {Conference} on {Decision} {Aid} {Sciences} and {Applications} ({DASA})},
	author = {{F. Abdulhafidh Dael} and {U. Yavuz} and {A. A. Almohammedi}},
	month = mar,
	year = {2022},
	note = {Journal Abbreviation: 2022 International Conference on Decision Aid Sciences and Applications (DASA)},
	pages = {1510--1514},
}

@misc{noauthor_logging-log4j-sampleslog4j-server_nodate,
	title = {logging-log4j-samples/log4j-server at main · apache/logging-log4j-samples},
	url = {https://github.com/apache/logging-log4j-samples/tree/main/log4j-server},
	abstract = {Use case examples of the Apache Log4j project. Contribute to apache/logging-log4j-samples development by creating an account on GitHub.},
	language = {en},
	urldate = {2024-07-02},
	journal = {GitHub},
}

@article{decan_gap_2020,
	title = {{GAP}: {Forecasting} {Commit} {Activity} in git {Projects}},
	volume = {165},
	doi = {10.1016/j.jss.2020.110573},
	journal = {Journal of Systems and Software},
	author = {Decan, Alexandre and Constantinou, Eleni and Mens, Tom and Rocha, Henrique},
	month = mar,
	year = {2020},
	pages = {110573},
}

@inproceedings{durumeric_matter_2014,
	address = {New York, NY, USA},
	series = {{IMC} '14},
	title = {The {Matter} of {Heartbleed}},
	isbn = {978-1-4503-3213-2},
	url = {https://doi.org/10.1145/2663716.2663755},
	doi = {10.1145/2663716.2663755},
	abstract = {The Heartbleed vulnerability took the Internet by surprise in April 2014. The vulnerability, one of the most consequential since the advent of the commercial Internet, allowed attackers to remotely read protected memory from an estimated 24–55\% of popular HTTPS sites. In this work, we perform a comprehensive, measurement-based analysis of the vulnerability's impact, including (1) tracking the vulnerable population, (2) monitoring patching behavior over time, (3) assessing the impact on the HTTPS certificate ecosystem, and (4) exposing real attacks that attempted to exploit the bug. Furthermore, we conduct a large-scale vulnerability notification experiment involving 150,000 hosts and observe a nearly 50\% increase in patching by notified hosts. Drawing upon these analyses, we discuss what went well and what went poorly, in an effort to understand how the technical community can respond more effectively to such events in the future.},
	booktitle = {Proceedings of the 2014 {Conference} on {Internet} {Measurement} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Durumeric, Zakir and Li, Frank and Kasten, James and Amann, Johanna and Beekman, Jethro and Payer, Mathias and Weaver, Nicolas and Adrian, David and Paxson, Vern and Bailey, Michael and Halderman, J. Alex},
	year = {2014},
	note = {event-place: Vancouver, BC, Canada},
	keywords = {heartbleed, internet-wide scanning, openssl, security},
	pages = {475--488},
}

@inproceedings{w_hu_open_2019,
	title = {Open {Source} {Software} {Vulnerability} {Propagation} {Analysis} {Algorithm} based on {Knowledge} {Graph}},
	doi = {10.1109/SmartCloud.2019.00030},
	booktitle = {2019 {IEEE} {International} {Conference} on {Smart} {Cloud} ({SmartCloud})},
	author = {{W. Hu} and {Y. Wang} and {X. Liu} and {J. Sun} and {Q. Gao} and {Y. Huang}},
	month = dec,
	year = {2019},
	note = {Journal Abbreviation: 2019 IEEE International Conference on Smart Cloud (SmartCloud)},
	pages = {121--127},
}

@inproceedings{c_liu_demystifying_2022,
	title = {Demystifying the {Vulnerability} {Propagation} and {Its} {Evolution} via {Dependency} {Trees} in the {NPM} {Ecosystem}},
	isbn = {1558-1225},
	doi = {10.1145/3510003.3510142},
	booktitle = {2022 {IEEE}/{ACM} 44th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	author = {{C. Liu} and {S. Chen} and {L. Fan} and {B. Chen} and {Y. Liu} and {X. Peng}},
	month = may,
	year = {2022},
	note = {Journal Abbreviation: 2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)},
	pages = {672--684},
}

@inproceedings{s_kyatam_heartbleed_2017,
	title = {Heartbleed attacks implementation and vulnerability},
	doi = {10.1109/LISAT.2017.8001980},
	booktitle = {2017 {IEEE} {Long} {Island} {Systems}, {Applications} and {Technology} {Conference} ({LISAT})},
	author = {{S. Kyatam} and {A. Alhayajneh} and {T. Hayajneh}},
	month = may,
	year = {2017},
	note = {Journal Abbreviation: 2017 IEEE Long Island Systems, Applications and Technology Conference (LISAT)},
	pages = {1--6},
}

@inproceedings{a_m_mir_effect_2023,
	title = {On the {Effect} of {Transitivity} and {Granularity} on {Vulnerability} {Propagation} in the {Maven} {Ecosystem}},
	isbn = {2640-7574},
	doi = {10.1109/SANER56733.2023.00028},
	booktitle = {2023 {IEEE} {International} {Conference} on {Software} {Analysis}, {Evolution} and {Reengineering} ({SANER})},
	author = {{A. M. Mir} and {M. Keshani} and {S. Proksch}},
	month = mar,
	year = {2023},
	note = {Journal Abbreviation: 2023 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	pages = {201--211},
}

@article{roumani_time_2015,
	title = {Time series modeling of vulnerabilities},
	volume = {51},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404815000358},
	doi = {10.1016/j.cose.2015.03.003},
	abstract = {Vulnerability prediction models forecast future vulnerabilities and can be used to assess security risks and estimate the resources needed for handling potential security breaches. Although several vulnerability prediction models have been proposed, such models have shortcomings and do not consider trend, level, and seasonality components of vulnerabilities. Through time series analysis, this study built predictive models for five popular web browsers: Chrome, Firefox, Internet Explorer, Safari and Opera and for all reported vulnerabilities elsewhere. Results showed that time series models provide a good fit to our vulnerability datasets and can be useful for vulnerability prediction. Results also suggested that the level of the series is the best estimator of the prediction models.},
	journal = {Computers \& Security},
	author = {Roumani, Yaman and Nwankpa, Joseph K. and Roumani, Yazan F.},
	month = jun,
	year = {2015},
	keywords = {ARIMA, Exponential smoothing, Forecasting, Time series modeling, Vulnerabilities, Web browsers},
	pages = {32--40},
}

@article{pokhrel_cybersecurity_2017,
	title = {Cybersecurity: {Time} {Series} {Predictive} {Modeling} of {Vulnerabilities} of {Desktop} {Operating} {System} {Using} {Linear} and {Non}-{Linear} {Approach}},
	volume = {08},
	doi = {10.4236/jis.2017.84023},
	journal = {Journal of Information Security},
	author = {Pokhrel, Nawa Raj and Rodrigo, Hansapani and Tsokos, Chris},
	month = jan,
	year = {2017},
	pages = {362--382},
}

@article{gencer_time_2021,
	title = {Time {Series} {Forecast} {Modeling} of {Vulnerabilities} in the {Android} {Operating} {System} {Using} {ARIMA} and {Deep} {Learning} {Methods}},
	volume = {30},
	doi = {10.1016/j.suscom.2021.100515},
	journal = {Sustainable Computing: Informatics and Systems},
	author = {Gencer, Kerem and Fatih, B.},
	month = jan,
	year = {2021},
	pages = {100515},
}

@article{xia_predicting_2022,
	title = {Predicting health indicators for open source projects (using hyperparameter optimization)},
	volume = {27},
	issn = {1382-3256},
	url = {https://doi.org/10.1007/s10664-022-10171-0},
	doi = {10.1007/s10664-022-10171-0},
	abstract = {Software developed on public platform is a source of data that can be used to make predictions about those projects. While the individual developing activity may be random and hard to predict, the developing behavior on project level can be predicted with good accuracy when large groups of developers work together on software projects. To demonstrate this, we use 64,181 months of data from 1,159 GitHub projects to make various predictions about the recent status of those projects (as of April 2020). We find that traditional estimation algorithms make many mistakes. Algorithms like k-nearest neighbors (KNN), support vector regression (SVR), random forest (RFT), linear regression (LNR), and regression trees (CART) have high error rates. But that error rate can be greatly reduced using hyperparameter optimization. To the best of our knowledge, this is the largest study yet conducted, using recent data for predicting multiple health indicators of open-source projects. To facilitate open science (and replications and extensions of this work), all our materials are available online at .},
	number = {6},
	journal = {Empirical Softw. Engg.},
	author = {Xia, Tianpei and Fu, Wei and Shu, Rui and Agrawal, Rishabh and Menzies, Tim},
	month = nov,
	year = {2022},
	note = {Place: USA
Publisher: Kluwer Academic Publishers},
	keywords = {Hyperparameter optimization, Machine learning, Project health},
}

@article{l_bao_large_2021,
	title = {A {Large} {Scale} {Study} of {Long}-{Time} {Contributor} {Prediction} for {GitHub} {Projects}},
	volume = {47},
	issn = {1939-3520},
	doi = {10.1109/TSE.2019.2918536},
	number = {6},
	journal = {IEEE Transactions on Software Engineering},
	author = {{L. Bao} and {X. Xia} and {D. Lo} and {G. C. Murphy}},
	month = jun,
	year = {2021},
	pages = {1277--1298},
}

@inproceedings{m_z_malik_protection_2023,
	title = {Protection {Mechanism} against {Software} {Supply} {Chain} {Attacks} through {Blockchain}},
	doi = {10.1109/ComTech57708.2023.10164932},
	booktitle = {2023 {International} {Conference} on {Communication} {Technologies} ({ComTech})},
	author = {{M. Z. Malik} and {S. Z. A. Bukhari}},
	month = mar,
	year = {2023},
	note = {Journal Abbreviation: 2023 International Conference on Communication Technologies (ComTech)},
	pages = {73--78},
}

@article{ohm_backstabbers_2020,
	title = {Backstabber's {Knife} {Collection}: {A} {Review} of {Open} {Source} {Software} {Supply} {Chain} {Attacks}},
	volume = {abs/2005.09535},
	url = {https://arxiv.org/abs/2005.09535},
	journal = {CoRR},
	author = {Ohm, Marc and Plate, Henrik and Sykosch, Arnold and Meier, Michael},
	year = {2020},
	note = {arXiv: 2005.09535},
}

@inproceedings{x_wang_feasibility_2021,
	title = {On the {Feasibility} of {Detecting} {Software} {Supply} {Chain} {Attacks}},
	isbn = {2155-7586},
	doi = {10.1109/MILCOM52596.2021.9652901},
	booktitle = {{MILCOM} 2021 - 2021 {IEEE} {Military} {Communications} {Conference} ({MILCOM})},
	author = {{X. Wang}},
	month = dec,
	year = {2021},
	note = {Journal Abbreviation: MILCOM 2021 - 2021 IEEE Military Communications Conference (MILCOM)},
	pages = {458--463},
}

@inproceedings{k_singi_trusted_2019,
	title = {Trusted {Software} {Supply} {Chain}},
	isbn = {2643-1572},
	doi = {10.1109/ASE.2019.00141},
	booktitle = {2019 34th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE})},
	author = {{K. Singi} and {J. C. B. R P} and {S. Podder} and {A. P. Burden}},
	month = nov,
	year = {2019},
	note = {Journal Abbreviation: 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	pages = {1212--1213},
}

@inproceedings{zajdel_open_2022,
	address = {New York, NY, USA},
	series = {{SPLC} '22},
	title = {Open source software: an approach to controlling usage and risk in application ecosystems},
	isbn = {978-1-4503-9443-7},
	url = {https://doi.org/10.1145/3546932.3547000},
	doi = {10.1145/3546932.3547000},
	abstract = {The Open Source Software movement has been growing exponentially for a number of years with no signs of slowing. Driving this growth is the wide-spread availability of libraries and frameworks that provide many functionalities. Developers are saving time and money incorporating this functionality into their applications resulting in faster more feature-rich releases. Despite the growing success and the advantages that open source software provides, there is a dark side. Due to its community construction and largely unregulated distribution, the majority of open source software contains bugs, vulnerabilities and other issues making it highly susceptible to exploits. The lack of oversight in general hinders the quality of this software resulting in a trickle down effect in the applications that use it. Additionally, developers who use open source tend to arbitrarily download the software into their build systems but rarely keep track of what they have downloaded resulting in an excessive amount of open source software in their applications and in their ecosystem. This paper discusses processes and practices that users of open source software can implement into their environments that can safely track and control the introduction and usage of open source software into their applications, and report on some preliminary results obtained in an industrial context. We conclude by discussing governance issues related to the disciplined use and reuse of open source and areas for further improvements.},
	booktitle = {Proceedings of the 26th {ACM} {International} {Systems} and {Software} {Product} {Line} {Conference} - {Volume} {A}},
	publisher = {Association for Computing Machinery},
	author = {Zajdel, Stan and Costa, Diego Elias and Mili, Hafedh},
	year = {2022},
	note = {event-place: Graz, Austria},
	keywords = {DevSecOps, NPM, dependencies, maven, open source software},
	pages = {154--163},
}

@inproceedings{f_maulana_unmasking_2023,
	title = {Unmasking log4j’s {Vulnerability}: {Protecting} {Systems} against {Exploitation} through {Ethical} {Hacking} and {Cyberlaw} {Perspectives}},
	isbn = {2836-1911},
	doi = {10.1109/ICCCE58854.2023.10246082},
	booktitle = {2023 9th {International} {Conference} on {Computer} and {Communication} {Engineering} ({ICCCE})},
	author = {{F. Maulana} and {H. Fajri} and {M. F. Safitra} and {M. Lubis}},
	month = aug,
	year = {2023},
	note = {Journal Abbreviation: 2023 9th International Conference on Computer and Communication Engineering (ICCCE)},
	pages = {311--316},
}

@inproceedings{h_gupta_identification_2022,
	title = {Identification and {Analysis} of {Log4j} {Vulnerability}},
	isbn = {2767-7362},
	doi = {10.1109/SMART55829.2022.10047372},
	booktitle = {2022 11th {International} {Conference} on {System} {Modeling} \& {Advancement} in {Research} {Trends} ({SMART})},
	author = {{H. Gupta} and {A. Chaudhary} and {A. Kumar}},
	month = dec,
	year = {2022},
	note = {Journal Abbreviation: 2022 11th International Conference on System Modeling \& Advancement in Research Trends (SMART)},
	pages = {1580--1583},
}
